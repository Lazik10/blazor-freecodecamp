@page "/fragments"

@using BlazorFreeCodeCamp.Components.TemplatedComponents.RenderFragment
@using BlazorFreeCodeCamp.ViewModels

<h3>FragmentPage</h3>

<RenderFragmentComponents>
    @* 3) Use that public RenderFragment member and insert HTML it should insert into that fragment *@
    <Fragment>
        <h1 style="color:red">This is first fragment</h1>
    </Fragment>
</RenderFragmentComponents>

<RenderFragmentComponents>
    <Fragment>
        <h2 style="color:blue">This is second fragment</h2>
    </Fragment>
</RenderFragmentComponents>

<RenderFragmentComponents>
    <Fragment>
        <h3 style="color:green">This is third fragment</h3>
    </Fragment>
</RenderFragmentComponents>

<hr/>

@* 3) Pass the parameters *@
<GenericTypedItemList List="_people" ExcludeColumns="Id"/>

<hr/>
@* 4) Pass the parameters 
    - Items - source for the RenderFragment part, it also specifies the TItem type
*@
<GenericTypedRenderFragment Items="_people">
    @* 5) Render Fragment part *@
    <ItemInfo Context="person"> @* 6) Make alias/name for the item provided to the RenderFragment *@
        <div>@person.Id, @person.FirstName, @person.LastName, <br/> @person.Salary</div>
    </ItemInfo>
</GenericTypedRenderFragment>


@code {
    private List<PersonViewModel> _people = new List<PersonViewModel>();

    protected override void OnInitialized()
    {
        base.OnInitialized();

        _people.Add(new PersonViewModel { FirstName = "Lazik", LastName = "Lazik", IsActive = false, Salary = 100000m });
        _people.Add(new PersonViewModel { FirstName = "Patrik", LastName = "Laska", IsActive = true, Salary = 200000m });
        _people.Add(new PersonViewModel { FirstName = "Tadeas", LastName = "Laska", IsActive = false, Salary = 500000m });
    }
}
